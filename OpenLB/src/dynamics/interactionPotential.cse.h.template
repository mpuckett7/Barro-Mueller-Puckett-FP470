/*  This file is part of the OpenLB library
 *
 *  Copyright (C) 2024 Tim Bingert, Luiz Czelusniak,
 *                     Maximilian Schecher, Adrian Kummerlaender
 *  E-mail contact: info@openlb.net
 *  The most recent release of OpenLB can be downloaded at
 *  <http://www.openlb.net/>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA  02110-1301, USA.
*/

#ifndef DYNAMICS_INTERACTION_POTENTIAL_CSE_H
#define DYNAMICS_INTERACTION_POTENTIAL_CSE_H

<%! from bindings import olb %>\
<%! from generator import compute_method_cse %>\
<%! from data import Scalar, Vector %>\

#ifndef DISABLE_CSE

namespace olb {

namespace interaction {

% for N in [3]:
template <>
struct MCPRpseudoPotential<${N}> {

${compute_method_cse(olb.interaction.MCPRpseudoPotential[N], "compute", rhoField=Vector(N), _T=Scalar(), k=Scalar(), a_c=Vector(N), b=Vector(N*N), T_c=Vector(N), m=Vector(N), alpha=Vector(N*N), g_I=Vector(N*N), g_II=Vector(N*N), bigM=Vector(N))}

${compute_method_cse(olb.interaction.MCPRpseudoPotential[N], "computeP", rhoField=Vector(N), _T=Scalar(), a_c=Vector(N), b=Vector(N*N), T_c=Vector(N), m=Vector(N), alpha=Vector(N*N), g_I=Vector(N*N), g_II=Vector(N*N), bigM=Vector(N))}

};
% endfor

}

}

#endif

#endif